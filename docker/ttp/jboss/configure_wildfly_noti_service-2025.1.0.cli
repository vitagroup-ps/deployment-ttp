# add datasource for notifications
###################################
set notiDbHost=mysql
#>available-env< TTP_DB_HOST
if (outcome == "success") of :resolve-expression(expression=${env.TTP_DB_HOST})
	set notiDbHost=${env.TTP_DB_HOST}
end-if
#>deprecated-env< NOTI_DB_HOST TTP_NOTI_DB_HOST
if (outcome == "success") of :resolve-expression(expression=${env.NOTI_DB_HOST})
	set notiDbHost=${env.NOTI_DB_HOST}
end-if
#>available-env< TTP_NOTI_DB_HOST mysql
if (outcome == "success") of :resolve-expression(expression=${env.TTP_NOTI_DB_HOST})
	set notiDbHost=${env.TTP_NOTI_DB_HOST}
end-if

set notiDbPort=3306
#>available-env< TTP_DB_PORT
if (outcome == "success") of :resolve-expression(expression=${env.TTP_DB_PORT})
	set notiDbPort=${env.TTP_DB_PORT}
end-if
#>deprecated-env< NOTI_DB_PORT TTP_NOTI_DB_PORT
if (outcome == "success") of :resolve-expression(expression=${env.NOTI_DB_PORT})
	set notiDbPort=${NOTI_DB_PORT}
end-if
#>available-env< TTP_NOTI_DB_PORT 3306
if (outcome == "success") of :resolve-expression(expression=${env.TTP_NOTI_DB_PORT})
	set notiDbPort=${TTP_NOTI_DB_PORT}
end-if

set notiDbName=notification_service
#>deprecated-env< NOTI_DB_NAME TTP_NOTI_DB_NAME
if (outcome == "success") of :resolve-expression(expression=${env.NOTI_DB_NAME})
	set notiDbName=${NOTI_DB_NAME}
end-if
#>available-env< TTP_NOTI_DB_NAME notification_service
if (outcome == "success") of :resolve-expression(expression=${env.TTP_NOTI_DB_NAME})
	set notiDbName=${TTP_NOTI_DB_NAME}
end-if

set notiDbUser=noti_user
#>available-env< TTP_DB_USER
if (outcome == "success") of :resolve-expression(expression=${env.TTP_DB_USER})
	set notiDbUser=${env.TTP_DB_USER}
end-if
#>deprecated-env< NOTI_DB_USER TTP_NOTI_DB_USER
if (outcome == "success") of :resolve-expression(expression=${env.NOTI_DB_USER})
	set notiDbUser=${NOTI_DB_USER}
end-if
#>available-env< TTP_NOTI_DB_USER noti_user
if (outcome == "success") of :resolve-expression(expression=${env.TTP_NOTI_DB_USER})
	set notiDbUser=${env.TTP_NOTI_DB_USER}
end-if

set notiDbPass=noti_password
#>available-env< TTP_DB_PASS
if (outcome == "success") of :resolve-expression(expression=${env.TTP_DB_PASS})
	set notiDbPass=${env.TTP_DB_PASS}
end-if
#>deprecated-env< NOTI_DB_PASS TTP_NOTI_DB_PASS
if (outcome == "success") of :resolve-expression(expression=${env.NOTI_DB_PASS})
	set notiDbPass=${NOTI_DB_PASS}
end-if
#>available-env< TTP_NOTI_DB_PASS noti_password
if (outcome == "success") of :resolve-expression(expression=${env.TTP_NOTI_DB_PASS})
	set notiDbPass=${TTP_NOTI_DB_PASS}
end-if

if (outcome != "success") of /subsystem=datasources/data-source=NotificationDS:read-resource
	try
		echo \>\>\> add datasources NotificationDS
		data-source add \
			--name=NotificationDS \
			--driver-name=mysql \
			--jndi-name=java:jboss/datasources/NotificationDS \	
			--connection-url=jdbc:mysql://$notiDbHost:$notiDbPort/$notiDbName?useSSL=false&allowPublicKeyRetrieval=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Europe/Berlin \
			--user-name=$notiDbUser \
			--password=$notiDbPass \
			--use-ccm=true \
			--min-pool-size=0 \
			--max-pool-size=20 \
			--flush-strategy=FailingConnectionOnly \
			--use-java-context=true \
			--jta=false \
			--enabled=true \
			--check-valid-connection-sql="select 1" \
			--validate-on-match=false \
			--background-validation=true \
			--background-validation-millis=10000
	catch
		echo \<\<\< FAILED add datasources NotificationDS
		data-source remove --name=NotificationDS
	end-try
end-if


# add logger
#############
#>available-env< TTP_LOG_PATTERN %d %-5p [%c] (%t) %s%E%n
set logPattern="%d %-5p [%c] (%t) %s%E%n"
if (outcome == "success") of :resolve-expression(expression=${env.TTP_LOG_PATTERN})
	set logPattern=${env.TTP_LOG_PATTERN}
end-if
#>available-env< TTP_NOTI_LOG_PATTERN TTP_LOG_PATTERN
if (outcome == "success") of :resolve-expression(expression=${env.TTP_NOTI_LOG_PATTERN})
	set logPattern=${env.TTP_NOTI_LOG_PATTERN}
end-if

set logLevel="INFO"
if (outcome == "success") of :resolve-expression(expression=${env.TTP_LOG_LEVEL})
	set logLevel=${env.TTP_LOG_LEVEL}
end-if
#>deprecated-env< NOTI_LOG_LEVEL TTP_NOTI_LOG_LEVEL
if (outcome == "success") of :resolve-expression(expression=${env.NOTI_LOG_LEVEL})
	set logLevel=${env.NOTI_LOG_LEVEL}
end-if
#>available-env< TTP_NOTI_LOG_LEVEL INFO
if (outcome == "success") of :resolve-expression(expression=${env.TTP_NOTI_LOG_LEVEL})
	set logLevel=${env.TTP_NOTI_LOG_LEVEL}
end-if
if (result ~= "(TRACE|DEBUG|INFO|WARN|ERROR|FATAL)") of :resolve-expression(expression=$logLevel)
	echo \>\>\> set noti-logger to level $logLevel
else
	echo \<\<\< given loglevel not allowed ($logLevel), set INFO
	set logLevel="INFO"
end-if

set logTo="console"
if (outcome == "success") of :resolve-expression(expression=${env.TTP_LOG_TO})
	set logTo=${env.TTP_LOG_TO}
end-if
#>deprecated-env< NOTI_FILE_LOG TTP_NOTI_LOG_TO
if (result ~= "(?i)(on|true|yes|1)") of :resolve-expression(expression=${env.NOTI_FILE_LOG})
    set logTo="file"
end-if
if (result ~= "(?i)(off|false|no|0)") of :resolve-expression(expression=${env.NOTI_FILE_LOG})
    set logTo="console"
end-if
#>deprecated-env< TTP_NOTI_LOG_TO_FILE TTP_NOTI_LOG_TO
if (result ~= "(?i)(on|true|yes|1)") of :resolve-expression(expression=${env.TTP_NOTI_LOG_TO_FILE})
    set logTo="file"
end-if
if (result ~= "(?i)(off|false|no|0)") of :resolve-expression(expression=${env.TTP_NOTI_LOG_TO_FILE})
    set logTo="console"
end-if
#>available-env< TTP_NOTI_LOG_TO FALSE
if (outcome == "success") of :resolve-expression(expression=${env.TTP_NOTI_LOG_TO})
	set logTo=${env.TTP_NOTI_LOG_TO}
end-if
if (outcome != "success") of /subsystem=logging/logger=org.emau.icmvc.ttp.notification:read-resource
  /subsystem=logging/logger=org.emau.icmvc.ttp.notification:add(use-parent-handlers=false,handlers=[])
end-if
/subsystem=logging/logger=org.emau.icmvc.ttp.notification:write-attribute(name=level,value=$logLevel)
if (result ~= "(?i).*file.*") of :resolve-expression(expression=$logTo)
	try
		echo \>\>\> add noti-logger as separate file (noti.log)
		/subsystem=logging/custom-handler=noti-file-handler:add(class=org.jboss.logmanager.handlers.PeriodicSizeRotatingFileHandler, module=org.jboss.logmanager, formatter=$logPattern, properties={rotateSize=10240000,maxBackupIndex=20,append=true,suffix=".yyyy-MM-dd",fileName="${jboss.server.log.dir}/noti/noti.log"})
		/subsystem=logging/logger=org.emau.icmvc.ttp.notification:add-handler(name="noti-file-handler")
	catch
        echo \<\<\< noti-file-handler already exists
	end-try
end-if
if (result ~= "(?i).*console.*") of :resolve-expression(expression=$logTo)
	try
		echo \>\>\> add noti-logger to console
		/subsystem=logging/console-handler=noti-console-handler:add(named-formatter=COLOR-PATTERN)
		/subsystem=logging/logger=org.emau.icmvc.ttp.notification:add-handler(name="noti-console-handler")
	catch
        echo \<\<\< noti-console-handler already exists
	end-try
end-if

