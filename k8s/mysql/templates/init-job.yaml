apiVersion: batch/v1
kind: Job
metadata:
  name: ttp-msql-operator-init-job
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: mysql-init
          image: mysql:8
          command: ["/bin/sh","-lc"]
          args:
            - |
              set -e

              echo "Waiting for MySQL Router at $HOST:3306 ..."
              for i in $(seq 1 500); do
                mysqladmin ping -h "$HOST" --silent && break
                sleep 2
              done

              # Check if bootstrap already ran
              HAS_MARK=$(mysql -h "$HOST" -P 3306 -u "$USER" -p"$PASSWORD" -N -B \
                -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'bootstrap_meta' AND table_name = 'applied';" || echo 0)

              if [ "$HAS_MARK" -eq 0 ]; then
                echo "First-time setup detected. Bootstrapping..."
                mysql -h "$HOST" -P 3306 -u "$USER" -p"$PASSWORD" -e "
                  CREATE DATABASE IF NOT EXISTS bootstrap_meta;
                  CREATE TABLE IF NOT EXISTS bootstrap_meta.applied (id INT PRIMARY KEY);"

                echo "Applying SQL files..."
                for f in /sqls/*.sql; do
                  echo "Running $f ..."
                  mysql -h "$HOST" -P 3306 -u "$USER" -p"$PASSWORD" < "$f"
                done

                mysql -h "$HOST" -P 3306 -u "$USER" -p"$PASSWORD" -e "
                  INSERT INTO bootstrap_meta.applied (id) VALUES (1);"

                echo "All SQL applied."
              else
                echo "Bootstrap already applied. Skipping."
              fi
          env:
            - name: HOST
              value: {{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local
            - name: USER
              value: {{ .Values.mysqlInnodbcluster.credentials.root.user }}
            - name: PASSWORD
              value: {{ .Values.mysqlInnodbcluster.credentials.root.password }}
          volumeMounts:
            - name: sqls
              mountPath: /sqls
      volumes:
        - name: sqls
          configMap:
            name: ttp-msql-operator-init-sqls
